api-name: account-api
version: 1.0

base_path: /account
server_port: 8001
db_driver: org.h2.Driver
db_url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
db_user: sa
db_password: 

get_endpoint: /getAccount
get_endpoint_query: >
 SELECT id,accountname,salary,employeeid 
 FROM Account WHERE id=?

get_all_endpoint: /getAllAccounts
get_all_endpoint_query: > 
 SELECT id,accountname,salary,employeeid
 FROM Account

post_endpoint: /insertAccount
post_endpoint_query: >
 INSERT INTO Account (id, accountname, salary, employeeid) 
 VALUES (?, ?, ?, ?)

put_endpoint: /updateAccount
put_endpoint_query: >
 UPDATE Account 
 SET accountname=?, salary=? 
 WHERE employeeid=?
 
patch_endpoint: /patchAccount
patch_endpoint_query: >
 UPDATE Account 
 SET salary=?
 WHERE id=?

delete_endpoint: /deleteAccount
delete_endpoint_query: >
 DELETE FROM Account 
 WHERE id=?

 
## Its all about SQLs how you can form them , lets take banking application, give me list of SQLs that represent simple banking application
## like getUser, updateUser, insertUser then insertTransaction, updateTransaction, Fundtransfer. Getting SQLs for this application is important 
## then we need to form SQLs in sequence order so that APIGeneration will create jar in such manner.

## Forget about how logic implemented using spring boot java logic , underlining thing is that how we can achieve same application  using only SQLs, use chatgpt
## get some info about every application. check random applications and their only SQLs to achieve it with minimal logic implementation.

